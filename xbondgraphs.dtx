% \iffalse meta-comment
% 
% Copyright (C) 2018 by M.J.W. Snippe
% -----------------------------------
% 
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
% 
%     http://www.latex-project.org/lppl.txt
% 
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
% 
% This work has the LPPL maintenance status `maintained'.
% 
% The Current Maintainer of this work is M.J.W. Snippe
% 
% This work consists of the files found at https://github.com/MaxSnippe/xbondgraphs.
% 
% \fi
% 
% \iffalse
% 
%<*driver>
\documentclass{ltxdoc}
\usepackage{xbondgraphs}
\usepackage{xspace}
\usepackage{mathpazo}
\usepackage{pifont}
\usepackage{iconix}
\usepackage{booktabs}
\usepackage{tabu}
\usepackage{longtable}
\usepackage{footnote}
\usepackage{subcaption}
\usepackage{listings}
\usepackage[numbered]{hypdoc}
\usepackage[noabbrev]{cleveref}
\usepackage{lstautogobble}
% 
\pgfmathsetlengthmacro{\multibondwidth}{30mm}
\pgfmathsetlengthmacro{\singlebondwidth}{12.5mm}
\pgfmathsetmacro{\barbangle}{40}
%
\hyphenation{bond-graphs x-bond-graphs}
\newcommand\textvtt[1]{{\normalfont\fontfamily{cmvtt}\selectfont #1}}
\renewcommand{\MacroFont}{\color{black!70!blue}\small\ttfamily}
%
\newcommand{\todolabel}{\textcolor{black}{\textbf{To do}}\xspace}
\newcommand{\todo}[1]{\marginpar{\todolabel: \protect{#1}}\phantomsection\addcontentsline{tdo}{subsection}{#1}}
\makeatletter
\newcommand{\listoftodos}{\section{To-do list} \@starttoc{tdo}}
\makeatother
%
\hypersetup{hidelinks}
%
\makesavenoteenv{table}
%
\lstset{
	autogobble,
	tabsize=4,
	breaklines=true,
	basicstyle=\ttfamily\small,
	language=[LaTeX]Tex,
}
%
\usetikzlibrary{positioning}
%
\newcommand{\Tikz}{\normalfont Ti\textit{k}Z\xspace}
\newcommand{\pgf}{PGF\xspace}
\newcommand{\xbondgraphs}{\textsf{xbondgraphs}\xspace}
\newcommand{\bondgraphs}{\textsf{bondgraphs}\xspace}
\let\origLaTeX\LaTeX
\def\LaTeX{\origLaTeX\xspace}
\def\cmark{\ding{51}}
\def\xmark{\ding{55}}
%
\captionsetup{labelfont=bf,font=small,labelsep=endash}
\captionsetup[subfigure]{font=footnotesize}
%
\tikzset{
	> = stealth,
	arrow tip demonstration/.style={red,opacity=.75},
	arrow tip line style/.style={gray!40!black,line width = 0.5pt},
	annotation style/.style={line width = .4pt,gray,text=black,<->},
}
%
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
	\DocInput{xbondgraphs.dtx}
\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
%  {Upper-case \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits \0\1\2\3\4\5\6\7\8\9
%   Exclamation \! Double quote \" Hash (number) \#
%   Dollar \$ Percent \% Ampersand \&
%   Acute accent \' Left paren \( Right paren \)
%   Asterisk \* Plus \+ Comma \,
%   Minus \- Point \. Solidus \/
%   Colon \: Semicolon \; Less than \<
%   Equals \= Greater than \> Question mark \?
%   Commercial at \@ Left bracket \[ Backslash \\
%   Right bracket \] Circumflex \^ Underscore \_
%   Grave accent \` Left brace \{ Vertical bar \|
%   Right brace \} Tilde \~}
%
% \changes{v0.0.1}{2018/05/02}{Initial version}
%
% \GetFileInfo{xbondgraphs.sty}
%
% \DoNotIndex{\#,\$,\%,\&,\@,\\,\{,\},\^,\_,\~,\ }
% \DoNotIndex{\if,\else,\fi,\def,\ifcase,\or}
%
% \title{The \xbondgraphs package\thanks{This document corresponds to \xbondgraphs\space\fileversion, dated\space\filedate.}\\[0.5em]
% 	\large Drawing bond graphs using \Tikz}
% \author{Marcus J.W. Snippe\\
%	\normalsize\href{mailto:m.j.w.snippe@saxion.nl}{\textvtt{\textless m.j.w.snippe@saxion.nl\textgreater}}}
%
% \maketitle
%
% \begin{abstract}
%	When using the \xbondgraphs-package, the user can draw visually pleasing bond graphs, while mostly maintaining the standard notation of \Tikz drawings. It defines two new \pgf arrows, a \pgf decoration to ensure the direction of the barb, as well as a \pgf shape for power (de-)mux elements. This package is based on the \bondgraphs package by Geert Folkertsma\footnote{\url{https://ctan.org/pkg/bondgraphs}}, but does not (yet) cover all its functions. It \emph{might} result in more appealing bond graphs, but this of course is subjective.
% \end{abstract}
% \tableofcontents
%\section{Introduction}
%	
%	\subsection{Motivation}
%		This package is a by-product of a project in which I was in need of a convenient way to draw bond graphs. At first, the \bondgraphs package was sufficient, but as the delivery date of the final report approached, I became less and less satisfied by the aesthetic end result of my bond graphs, especially when using multi-bonds. \Cref{fig:comparisonmultibonds} shows a simple comparison between the \bondgraphs- and the \xbondgraphs package.
%		
%		\begin{figure}[htbp]
%			\centering
%			\begin{subfigure}{.45\linewidth}
%				\centering
%				\caption{Using the \bondgraphs package}
%				\label{fig:comparisonmultibonds-bondgraphs}
%			\end{subfigure}
%			\begin{subfigure}{.45\linewidth}
%				\centering
%				\caption{Using the \xbondgraphs package}
%				\label{fig:comparisonmultibonds-xbondgraphs}
%			\end{subfigure}
%			\caption{Comparison of multi bond graph drawing.}
%			\label{fig:comparisonmultibonds}
%		\end{figure}
%		
%		\Cref{fig:comparisonmultibonds} shows the main motivation for this package. Although of course subjective, most of the differences between the \bondgraphs- and the \xbondgraphs package can be argued to be improvements. The drawing in \cref{fig:comparisonmultibonds-xbondgraphs} is overall more consistent. %The causality stroke of \cref{fig:comparisonmultibonds-bondgraphs} with flow-out causality is overdrawn by the inner line of the multi bond. This is fixed in \cref{fig:comparisonmultibonds-xbondgraphs}.
%		Most flaws of the drawing in \cref{fig:comparisonmultibonds-bondgraphs} can be traced back to the decoration being a \texttt{postaction}. This however is needed to inherit other options from the \verb|\draw|-command, e.g. color.
%		
%		Due to these reasons, I wrote the \xbondgraphs package from scratch, re-using some parts but in a completely different setup.
%		
%	\subsection{Alternatives}
%	
%		As already mentioned, this package is based on the \bondgraphs package, but does not (yet) cover all its functions. A comparison of main package functions is shown in \cref{tab:functioncomparison}.
%		
%		\begin{table}[h]
%			\centering
%			\caption{Function comparison between \bondgraphs and \xbondgraphs.}
%			\label{tab:functioncomparison}
%			\begin{tabular}{lcc}
%				\toprule
%				                                                                   &        \bondgraphs         &       \xbondgraphs        \\ \midrule
%				Automatic arrow barb direction                                     & \textcolor{green}{\cmark}  & \textcolor{green}{\cmark} \\
%				Single bond drawings                                               & \textcolor{green}{\cmark}  & \textcolor{green}{\cmark} \\
%				Multi bond drawings\footnote{See \cref{fig:comparisonmultibonds}.} & \textcolor{orange}{\cmark} & \textcolor{green}{\cmark} \\
%				Power (de-)mux element                                             &  \textcolor{red}{\xmark}   & \textcolor{green}{\cmark} \\
%				Multi-segment bonds                                                &  \textcolor{red}{\xmark}   & \textcolor{green}{\cmark} \\
%				Curly bond barb                                                    & \textcolor{green}{\cmark}  &  \textcolor{red}{\xmark}  \\
%				Colon between element and variable\footnote{This is optional.}     &  \textcolor{red}{\xmark}   & \textcolor{green}{\cmark} \\ \bottomrule
%			\end{tabular}
%		\end{table}
%		
%		A second alternative is the \textvtt{bondgraph}\footnote{\url{https://ctan.org/pkg/bondgraph}} package, but because it has nearly no documentation and an incomprehensible example file, I have never tried it personally.
%		
%	\subsection{Known issues}
%		
%		\begin{itemize}
%			\item None yet, but please submit issues to \url{https://github.com/MaxSnippe/xbondgraphs/issues}.
%		\end{itemize}
%
%\section{Basic usage}
%	
%	\subsection{Installation}
%		This package has not yet been included in popular \LaTeX distributions, and therefore can be installed only by downloading the source (\texttt{xbondgraphs.sty}) from \href{https://github.com/MaxSnippe/xbondgraphs}{the GitHub repository}\footnote{\url{https://github.com/MaxSnippe/xbondgraphs}} to your local TEXMF tree. It should be placed under \textvtt{\$TEXMF\$/tex/latex/local}.
%	
%	\subsection{Including the package}
%		The package can be included with the well-known \lstinline|\usepackage[<options>]{xbondgraphs}|, where \meta{options} can be any of the options mentioned in \cref{sec:globaloptions}. Options that set the same keys to different values are treated in the order in which they are provided. The package works fine straight-out-of-the-box without setting any options.
%		
%	\subsection{Simple example}
%		A simple example of an electric domain dynamic model shown as an iconic diagram, and its domain independent equal model shown as a bond graph.
%		\begin{figure}[h]
%			\centering
%			\begin{subfigure}[t]{.48\linewidth}
%				\centering
%				\begin{tikzpicture}
%				\draw[line width=1pt] (-1,-1) 
%					-- ++(0,0.5)
%					-- node[voltage source,label={above:$ u $}]{} ++(0,1)
%					-- node[current,label={above:$ i $}]{} ++(0,0.5)
%					-- node[inductor,label={above:$ L $}]{} ++(2,0) 
%					-- node[resistor2,label={above:$ R $}]{} ++(0,-2) 
%					-- node[capacitor,label={above:$ C $}]{} cycle;
%				\path (-2.5,-2.25) rectangle (2.5,2.25);
%				\end{tikzpicture}
%				\caption{}
%			\end{subfigure}
%			\begin{subfigure}[t]{.48\linewidth}
%				\centering
%				\begin{tikzpicture}
%					\node (u) at (-1.5, 0.0) [bond graph element={Se}{},pin={left:$ u $}];
%					\node (i) at ( 0.0, 0.0) [bond graph element={1}{},label={300:$ i $}];
%					\node (c) at ( 0.0, 1.5) [bond graph element={C}{},pin={above:$ C $}];
%					\node (r) at ( 1.5, 0.0) [bond graph element={R}{},pin={right:$ R $}];
%					\node (l) at ( 0.0,-1.5) [bond graph element={L}{},pin={below:$ L $}];
%					\draw[bond={effort out}] (u) -- (i);
%					\draw[bond={effort in}] (i) -- (c);
%					\draw[bond={effort in}] (i) -- (r);
%					\draw[bond={effort out}] (i) -- (l);
%					\path (-2.5,-2.25) rectangle (2.5,2.25);
%				\end{tikzpicture}
%				\caption{}
%			\end{subfigure}
%			\begin{subfigure}{.31\linewidth}
%				\begin{tikzpicture}[line width=1pt]
%					\node[mechanical earth,minimum height = 3cm] at (0,-1){};
%					\draw (0,0) -- ++(1.5,0) node[spring,label={above:$ \frac{1}{C} $}]{};
%					\draw (0,-1) -- ++(1.5,0) node[damper,label={above:$ R $}]{};
%					\draw (0,-2) -- ++(1.5,0) node[forcesource2,label={above:$ u $}]{};
%					\node[mass2,minimum height = 3cm, minimum width = 2cm,label={south:$ L $}](m) at (2.5,-1){};
%					\draw[->>,>=stealth] (m.north) -- ++(0,.5) -- ++(.5,0) node[component,label={east:$ i $}]{};
%				\end{tikzpicture}
%				\caption{}
%			\end{subfigure}
%			\caption{Electric domain dynamic model and its bond graph representation.}
%		\end{figure}
%\section{Options}
%	
%	\subsection{Global (package) options}
%		\label{sec:globaloptions}
%		
%		\DescribeMacro{barbdirection}
% 			\label{opt:barbdirection}
%		
%		\begin{tikzpicture}
%			\foreach \angle in {0,30,...,359}{
%				\draw[bond,/XBG/barbdirection=leftbelow] (0,0) -- ++(\angle:1.25);
%				\draw[bond,/XBG/barbdirection=alwaysbelow] (2.5,0) -- ++(\angle:1.25);
%				\draw[bond={multi},/XBG/barbdirection=leftbelow] (5,0) -- ++(\angle:1.25);
%				\draw[bond={multi},/XBG/barbdirection=alwaysbelow] (7.5,0) -- ++(\angle:1.25);
%			}
%		\end{tikzpicture}
%		
%	\subsection{Local (\Tikz) options}
%		\label{sec:localoptions}
%\section{Arrow tips}
%	
%	\subsection{Single bond arrow tip}
%		\label{sec:singlebondarrowtip}
%		
%		\begin{tikzpicture}
%			
%			% Calculate actual path points
%				\pgfmathsetlengthmacro{\tipx}{\singlebondwidth}
%				\pgfmathsetlengthmacro{\tipy}{0pt}
%				\pgfmathsetlengthmacro{\backx}{-1/tan(\barbangle)*(\multibondwidth-0.5*cos(\barbangle)*\singlebondwidth) + \singlebondwidth}
%				\pgfmathsetlengthmacro{\backy}{\multibondwidth - 0.5*cos(\barbangle)*\singlebondwidth}
%			% Calculate points of outer dimensions as needed by pgf
%				\pgfmathsetlengthmacro{\hullpointx}{\backx + 0.5*\singlebondwidth*sin(\barbangle)}
%				\pgfmathsetlengthmacro{\hullpointy}{\multibondwidth}
%				\pgfmathsetlengthmacro{\tipendx}{0.5*\singlebondwidth/tan(\barbangle/2) + \tipx}
%				\pgfmathsetlengthmacro{\tipendy}{-0.5*\singlebondwidth}
%			
%			\begin{scope}[line width = \singlebondwidth,/XBG/multibondwidth=\multibondwidth]
%			% Existing line
%			\draw (0,0) -- (-5,0);
%			
%			% Arrow tip
%			\draw[arrow tip demonstration,-{Single Bond Barb[left].|[width=2*\multibondwidth]}] (0,0) -- (\tipendx+\singlebondwidth,\tipy);
%	%					\draw[arrow tip demonstration] (0,0) -- (\tipx,\tipy) -- (\backx,\backy);
%	%					\draw[arrow tip demonstration] (\tipendx+0.5*\singlebondwidth,-\multibondwidth) -- (\tipendx+0.5*\singlebondwidth,\multibondwidth);
%			\draw[arrow tip line style] (0,0) -- (\tipx,\tipy) -- (\backx,\backy);
%			\end{scope}
%			
%			\begin{scope}[annotation style]
%				\begin{scope}[xshift=\tipendx+2.5mm]
%					\draw (0,\tipendy) -- node[right]{$ y_a $} (0,\tipy);
%					\draw (0,\tipy) -- node[right]{$ y_b $} (0,\backy);
%					\draw (0,\backy) -- node[right]{$ y_c $} (0,\hullpointy);
%				\end{scope}
%				\begin{scope}[yshift=\hullpointy+2.5mm]
%					\draw (\backx,0) -- node[above]{$ x_a $} (\hullpointx,0);
%					\draw (\hullpointx,0) -- node[above]{$ x_b $} (0,0);
%					\draw (0,0) -- node[above]{$ x_c $} (\tipx,0);
%					\draw (\tipx,0) -- node[above]{$ x_d $} (\tipendx,0);
%				\end{scope}
%			\end{scope}
%			
%			\begin{scope}[help lines]
%			\draw (\backx,\hullpointy) -- (\hullpointx,\hullpointy-|\tipendx+3mm,0);
%			\draw (\tipx,\tipy) -- (\tipx,\tipy-|\tipendx+3mm,0);
%			\end{scope}
%			
%		\end{tikzpicture}
%		
%	\subsection{Multi bond arrow tip}
%		\label{sec:multibondarrowtip}
%		
%		\begin{tikzpicture}
%			
%			% Calculate actual path points
%				\pgfmathsetlengthmacro{\startx}{0pt}
%				\pgfmathsetlengthmacro{\starty}{-0.5*\multibondwidth+0.5*\singlebondwidth}
%				\pgfmathsetlengthmacro{\tipx}{(\multibondwidth-\singlebondwidth)/tan(\barbangle)}
%				\pgfmathsetlengthmacro{\tipy}{-0.5*\multibondwidth + 0.5*\singlebondwidth}
%				\pgfmathsetlengthmacro{\backy}{1.5*\multibondwidth - 0.5*\singlebondwidth*cos(\barbangle)}
%				\pgfmathsetlengthmacro{\backx}{-(\backy+\tipy)/tan(\barbangle)}
%			% Calculate points of outer dimensions as needed by pgf
%				\pgfmathsetlengthmacro{\hullpointx}{\backx + 0.5*\singlebondwidth*sin(\barbangle)}
%				\pgfmathsetlengthmacro{\hullpointy}{1.5*\multibondwidth}
%				\pgfmathsetlengthmacro{\tipendx}{0.5*\singlebondwidth/tan(\barbangle/2) + \tipx}
%				\pgfmathsetlengthmacro{\tipendy}{-0.5*\multibondwidth}
%			
%			\begin{scope}[line width = \singlebondwidth]
%				% Existing line
%				\draw (0,\starty) -- (-5,\starty); 
%				\draw (0,-\starty) -- (-5,-\starty); 
%				
%				% Arrow tip
%				%					\draw[double,double distance={\multibondwidth-2*\singlebondwidth},arrow tip demonstration,-{Multi Bond Barb[left].|[width=3*\multibondwidth]}] (0,0) -- (\tipendx+\singlebondwidth,0);
%				\draw[arrow tip demonstration] (\startx,\starty) -- (\tipx,\tipy) -- (\backx,\backy);
%				\draw[arrow tip line style] (\startx,\starty) -- (\tipx,\tipy) -- (\backx,\backy);
%				\draw[arrow tip line style,green] (\tipx,\tipy) -- ++ (180-\barbangle:10cm);
%			\end{scope}
%			
%			\node[draw,cross out] at (\hullpointx,\hullpointy){};
%			
%			\begin{scope}[annotation style]
%				\draw[<->] (\tipx+5mm,\tipy) -- node[right]{$ 2a $} ++ (0,2*\multibondwidth);
%				\draw[<->] (\startx,\starty-5mm) -- node[below]{} (\tipx,\tipy-5mm);
%			\end{scope}
%			
%		\end{tikzpicture}
%\section{Examples}
%	
%	\begin{tikzpicture}
%		\node (Vabc) at (0,0) [bond graph element={MSe}{multiport,n=3},label={west:$ V_{abc} $}];
%		\node (iabc) [right=of Vabc,bond graph element={1}{},label={300:$ i_{abc} $}];
%		\node (Rs) [above=of iabc,bond graph element={R}{},pin={north:$ R_s $}];
%		\node (Ls) [below=of iabc,bond graph element={L}{},pin={south:$ L_s $}];
%		\node (Klambda) [right=of iabc,bond graph element={MGY}{},pin={south:$ K\Lambda(\theta_e) $}];
%		\node (mux1) [right=of Klambda,mux={outputs=3}];
%		\node (omegae) [right=of mux1,bond graph element={1}{},label={300:$ \omega_e $}];
%		\node (1overp) [right=of omegae,bond graph element={TF}{},pin={south:$ \frac{1}{p} $}];
%		\node (omegam) [right=of 1overp,bond graph element={1}{},label={300:$ \omega_m $}];
%		\node (Dr) [above=of omegam,bond graph element={R}{},pin={north:$ D_r $}];
%		\node (Jr) [below=of omegam,bond graph element={I}{},pin={south:$ J_r $}];
%		
%		\begin{scope}[bond={multi}]
%			\draw[bond={effort out}] (Vabc) -- (iabc);
%			\draw[bond={effort in}] (iabc) -- (Rs);
%			\draw[bond={effort out}] (iabc) -- (Ls);
%			\draw[bond={effort in}] (iabc) -- (Klambda);
%			\draw[bond={effort out}] (Klambda) -- (mux1);
%		\end{scope}
%		
%		\foreach \i in {1,2,3}{
%			\draw[bond={effort out}] (mux1.output\i) -- ++ (0.8,0) -- (omegae);
%		}
%		\draw[bond={effort out}] (omegae) -- (1overp);
%		\draw[bond={effort out}] (1overp) -- (omegam);
%		\draw[bond={effort out}] (omegam) -- (Jr);
%		\draw[bond={effort in}] (omegam) -- (Dr);
%	\end{tikzpicture}
% 
% \StopEventually{\PrintChanges \PrintIndex \listoftodos}
% 
% \clearpage
% \section{Implementation}
% 	\subsection{Package definition}
%    \begin{macrocode}
%<*package>
\NeedsTeXFormat{LaTeX2e}[2017/04/15]
\ProvidesPackage{xbondgraphs}
    [2018/05/04 v0.0.1 Bond graph drawing using TikZ]
%    \end{macrocode}
% 	\subsection{Required packages and libraries}
% 		This package uses the \textsf{pgfopts} package to be able to use |pgfkeys| as package options. All the actual drawing is done by \Tikz. The \textsf{amsfonts} package is used for the |\mathbb| font.
%    \begin{macrocode}
\RequirePackage{pgfopts}
\RequirePackage{tikz}
\RequirePackage{amsfonts}

\usetikzlibrary{arrows.meta,decorations.markings,shapes}
%    \end{macrocode}
%		\subsection{\pgf keys}
%		First define a few |\ifs| used for boolean \pgf keys.
%    \begin{macrocode}
\newif\ifxbg@bond@causality@eout
\newif\ifxbg@bond@causality@fout
\newif\ifxbg@element@word
\newif\ifxbg@element@multiport
\pgfkeys{
%    \end{macrocode}
%	\begin{macro}{/xbondgraphs}
%		The main family of \pgf keys is the |xbondgraphs| family.
%    \begin{macrocode}
  xbondgraphs/.is family,
  xbondgraphs,
%    \end{macrocode}
%	\end{macro}
%	\begin{macro}{/xbondgraphs/bond}
% 		The |bond| family holds all the keys for the bonds in the bond graphs, e.g. the |template| style used in the decoration.
%    \begin{macrocode}
    bond/.is family,
    bond,
      template/.style={
        shorten < = 3pt,
        shorten > = 3pt,
        draw,
        line width = \xbg@singlebondwidth,
      },
      barb direction/.store in=\xbg@bond@barbdir,
      barb direction flip angle/.store in=\xbg@bond@barbflipang,
%    \end{macrocode}
% 		The causality of the bond can be set with four different keys, of which |effort in| and |flow out| are aliases, and |effort out| and |flow in| too. Initially the |eout| and |fout| keys are false, but these are set accordingly when using the |effort in/out| and |flow in/out| keys.
%    \begin{macrocode}
      eout/.is if=xbg@bond@causality@eout,
      eout/.initial=false,
      fout/.is if=xbg@bond@causality@fout,
      fout/.initial=false,
      effort out/.code=\pgfkeys{
        /xbondgraphs/bond/.cd,
        eout=true,
        fout=false,
        /tikz/causal stroke/.append style={#1}
      },
      flow out/.code=\pgfkeys{
        /xbondgraphs/bond/.cd,
        eout=false,
        fout=true,
        /tikz/causal stroke/.append style={#1}
      },
      effort in/.code=\pgfkeys{/xbondgraphs/bond/flow out={#1}},
      flow in/.code=\pgfkeys{/xbondgraphs/bond/effort out={#1}},
%    \end{macrocode}
% 		By using the |multi| key, some other |bond| keys are set differently, and the |template| style is appended accordingly.
%    \begin{macrocode}
      multi/.code=\pgfkeys{
        /xbondgraphs/bond/causality stroke scale=3,
        /xbondgraphs/bond/barb arrow head={Multi Bond Barb},
        /xbondgraphs/bond/template/.append style={
          double,double distance={\xbg@multibondwidth-2*\xbg@singlebondwidth}
        },
%    \end{macrocode}
% 		The line width is also changed when |multi| is used, such that the nodes placed along the paths must be placed slightly further from the path center.
%    \begin{macrocode}
        /tikz/line width = \xbg@multibondwidth,
      },
      causality stroke scale/.store in=\xbg@causalitystrokescale,
      causality stroke scale=2,
      barb arrow head/.store in=\xbg@bond@barbtip,
      barb arrow head={Single Bond Barb},
      label/.style = {
        \xbg@bondlabelcolor,
      },
  /xbondgraphs,
%    \end{macrocode}
%	\end{macro}
%	\begin{macro}{/xbondgraphs/element}
% 		The |element| family holds all the keys for the elements in the bond graphs, e.g. the order |n|.
%    \begin{macrocode}
    element/.is family,
    element,
      n/.store in=\xbg@element@n,
      n=1,
      word/.is if=xbg@element@word,
      word/.default=true,
      word/.initial=false,
      multiport/.is if=xbg@element@multiport,
      multiport/.default=true,
      multiport/.initial=false,
%    \end{macrocode}
% 		The |label| style is used later in the \Tikz family tree.
%    \begin{macrocode}
      label/.style={
        \xbg@bgelementlabelcolor,
      },
%    \end{macrocode}
%	\end{macro}
%	\begin{macro}{/XBG}
% 		The |XBG| keys are used as package options
%    \begin{macrocode}
  /XBG/.cd,
  barbangle/.store in=\xbg@barbangle,
  barbangle=40,
  singlebondwidth/.store in=\xbg@singlebondwidth,
  singlebondwidth=1pt,
  multibondwidth/.store in=\xbg@multibondwidth,
  multibondwidth=4pt,
  bgelementlabelcolor/.store in=\xbg@bgelementlabelcolor,
  bgelementlabelcolor=blue,
  bondlabelcolor/.store in=\xbg@bondlabelcolor,
  bondlabelcolor=green!50!black,
  gray/.code={
    \pgfkeys{
      /XBG/.cd, bondlabelcolor=gray, bgelementlabelcolor=gray
    }
    \colorlet{diff}{white!60!black}
    \colorlet{error}{white!30!black}
  },
  barbdirection/.is choice,
  barbdirection/leftbelow/.code={\pgfkeys{/xbondgraphs/bond/barb direction flip angle=45}},
  barbdirection/alwaysbelow/.code={\pgfkeys{/xbondgraphs/bond/barb direction flip angle=-1}},
  barbdirection/alwaysbelow,
%    \end{macrocode}
%	\end{macro}
%	To make styles directly accesible inside |\node|\oarg{options} and |\draw|\oarg{options}, the styles are defined inside the |tikz| family.
%    \begin{macrocode}
  /tikz/.cd,
%    \end{macrocode}
%	\begin{macro}{/tikz/bond}
%    \begin{macrocode}
  bond/.style={
    /xbondgraphs/bond,
    #1,
    /tikz,
    draw = none,
    decoration={bond},
    postaction=decorate,
  },
%    \end{macrocode}
%	\end{macro}
%	\begin{macro}{/tikz/bond graph element}
%    \begin{macrocode}
  bond graph element/.code 2 args={
    \pgfkeys{
      /xbondgraphs/element,
      #2
    }
    \tikzset{
      shape=rounded rectangle,
      inner sep = 1.5pt,
      node contents = {%
        \ifxbg@element@multiport%
          \ifnum\xbg@element@n=1%
            \ensuremath{\mathbb{#1}}%
          \else%
            \ensuremath{\mathbb{#1}_{\xbg@element@n}}%
          \fi%
        \else%
          \ifnum\xbg@element@n=1%
            \ensuremath{\mathbf{#1}}%
          \else%
            \ensuremath{\mathbf{#1}_{\xbg@element@n}}%
          \fi%
        \fi%
      },
      prefix after command={
        \pgfextra{
          \tikzset{
            every pin/.style={
              /xbondgraphs/element/label,
              pin distance = 2pt,
              pin edge={
                draw = none,
                decoration={
                  markings,
                  mark = at position 0.5 with {
                    \node[rotate=\pgfdecoratedangle,inner sep = 0pt,/xbondgraphs/element/label]{:};
                  },
                },
                decorate,
              },
            },
            every label/.style={
              /xbondgraphs/element/label,
            },
          },
        }
      },
    }
    \ifxbg@element@word
      \tikzset{draw,line width = 0.75\xbg@singlebondwidth,shape=ellipse}
    \fi
  },
%    \end{macrocode}
%	\end{macro}
%    \begin{macrocode}
  bond label/.style={
    font=\small,
    /xbondgraphs/bond/label,
    sloped,
  },
  effort/.style={
    edge node={node [bond label,above]{#1}}
  },
  flow/.style={
    edge node={node [bond label,below]{#1}}
  },
  causal stroke/.style={
    width=\xbg@causalitystrokescale*\xbg@multibondwidth,
  },
}

% MUX SHAPE
\pgfkeys{
  /tikz/mux/.code={
    \pgfkeys{
      %      /tikz/shape=mux,
      /mux/.cd,
      #1
    }
    \tikzset{
      outer sep = 0pt,
      inner sep = 0pt,
      minimum width = \pgfkeysvalueof{/mux/width},
      node contents = {},
      fill=black,
      shape=mux,
    }
  },
  /mux/.is family,
  mux,
  inputs/.initial=2,
  outputs/.initial=2,
  io spacing/.initial=5mm,
  width/.initial=3pt,
}
\pgfdeclareshape{mux}{
  \savedanchor\centerpoint{%
    \pgf@x=0%
    \pgf@y=0%
  }%
  \inheritsavedanchors[from=rectangle] 
  \inheritanchorborder[from=rectangle]
  \inheritanchor[from=rectangle]{north}
  \inheritanchor[from=rectangle]{north west}
  \inheritanchor[from=rectangle]{north east}
  \inheritanchor[from=rectangle]{center}
  \inheritanchor[from=rectangle]{west}
  \inheritanchor[from=rectangle]{east}
  \inheritanchor[from=rectangle]{mid}
  \inheritanchor[from=rectangle]{mid west}
  \inheritanchor[from=rectangle]{mid east}
  \inheritanchor[from=rectangle]{south}
  \inheritanchor[from=rectangle]{south west}
  \inheritanchor[from=rectangle]{south east}
  \savedmacro\inputs{\pgfmathtruncatemacro\inputs{\pgfkeysvalueof{/mux/inputs}}}%
  \savedmacro\outputs{\pgfmathtruncatemacro\outputs{\pgfkeysvalueof{/mux/outputs}}}%
  \savedmacro\numio{\pgfmathparse{max(\inputs,\outputs)}\pgfmathtruncatemacro\numio\pgfmathresult}
  \saveddimen\height{%
    \pgfmathparse{max(\pgfkeysvalueof{/mux/inputs},\pgfkeysvalueof{/mux/outputs})}
    \pgfmathparse{(\pgfmathresult) * \pgfkeysvalueof{/mux/io spacing}}
    \pgfmathsetlength\pgf@x{\pgfmathresult}
  }
  \saveddimen\halfwidth{\pgfmathsetlength\pgf@x{\pgfkeysvalueof{/mux/width}/2}\pgfmathresult}
  \saveddimen\iospacing{\pgfmathsetlength\pgf@x{\pgfkeysvalueof{/mux/io spacing}}\pgfmathresult}
  \backgroundpath{
    \pgfpathrectanglecorners{
      \pgfpointadd{\centerpoint}{\pgfpoint{-\halfwidth}{\height/2}}
    }{
      \pgfpointadd{\centerpoint}{\pgfpoint{\halfwidth}{-\height/2}}
    }
  }
  \pgfutil@g@addto@macro\pgf@sh@s@mux{%
    % Start with the maximum input number and go backwards.
    % If the anchor is undefined, create it. Otherwise stop.
    \c@pgf@counta=\pgfkeysvalueof{/mux/inputs}\relax%
    \pgfmathloop%
    \ifnum\c@pgf@counta>0\relax%
    \pgfutil@ifundefined{pgf@anchor@mux@input\the\c@pgf@counta}{%
      \expandafter\xdef\csname pgf@anchor@mux@input\the\c@pgf@counta\endcsname{%
        \noexpand\ioanchor{\the\c@pgf@counta}{-1}{((\inputs-\numio)/2+0.5)}%
      }%
    }{\c@pgf@counta=0\relax}%
    \advance\c@pgf@counta-1\relax%
    \repeatpgfmathloop%  
  }%
  \pgfutil@g@addto@macro\pgf@sh@s@mux{%
    % Start with the maximum output number and go backwards.
    % If the anchor is undefined, create it. Otherwise stop.
    \c@pgf@counta=\pgfkeysvalueof{/mux/outputs}\relax%
    \pgfmathloop%
    \ifnum\c@pgf@counta>0\relax%
    \pgfutil@ifundefined{pgf@anchor@mux@output\the\c@pgf@counta}{%
      \expandafter\xdef\csname pgf@anchor@mux@output\the\c@pgf@counta\endcsname{%
        \noexpand\ioanchor{\the\c@pgf@counta}{1}{((\outputs-\numio)/2+0.5)}%
      }%
    }{\c@pgf@counta=0\relax}%
    \advance\c@pgf@counta-1\relax%
    \repeatpgfmathloop%  
  }%
}

\def\ioanchor#1#2#3{%
  \pgfpointadd{\centerpoint}{\pgfpoint{#2*\halfwidth}{\height/2-#1*\iospacing+#3*\iospacing}}%
}
%    \end{macrocode}
% 	\subsection{Arrow tip definitions}
% 		The arrow tips are defined using |\pgfdeclarearrow|. 
% \begin{macro}{Single Bond Barb}
% 	First the single bond barb is defined. The definition of this arrow is elaborated in \cref{sec:singlebondarrowtip}.
%    \begin{macrocode}
\pgfdeclarearrow{
  name = {Single Bond Barb},
  setup code = {
%    \end{macrocode}
%		First locally define the line width of a single bond, a multibond, and the (absolute) angle the barb makes with the bond. 
%    \begin{macrocode}
    \pgfmathsetlengthmacro{\sbw}{\pgflinewidth}
    \pgfmathsetlengthmacro{\mbw}{\xbg@multibondwidth}
    \pgfmathsetlengthmacro{\ba}{\xbg@barbangle}
%    \end{macrocode}
% 		Calculate the $ x $- and $ y $ position of the points that the barb will follow. If one was walking along the bond from startpoint to endpoint, the origin of this scope would be the endpoint, the $ x $ direction would be forward, and the $ y $ direction would be leftward.
%    \begin{macrocode}
    \pgfmathsetlengthmacro{\tipx}{\sbw}
    \pgfmathsetlengthmacro{\tipy}{0pt}
    \pgfmathsetlengthmacro{\backx}{-1/tan(\ba)*(\mbw-0.5*cos(\ba)*\sbw)%
      + \sbw}
    \pgfmathsetlengthmacro{\backy}{\mbw - 0.5*cos(\ba)*\sbw}
%    \end{macrocode}
% 		\pgf needs the outer points of the arrow tip to accurately determine the bounding box. Also, the actual tip of the arrow is needed, so the drawn bond will end exactly at the endpoint (the bond \Tikz styles use a |shorten > = |\meta{dimen} and |shorten > = |\meta{dimen} so they will not end exactly at the endpoint).
%    \begin{macrocode}
    \pgfmathsetlengthmacro{\hullpointx}{\backx + 0.5*\sbw*sin(\ba)}
    \pgfmathsetlengthmacro{\hullpointy}{\mbw}
    \pgfmathsetlengthmacro{\tipendx}{0.5*\sbw/tan(\ba/2) + \tipx}
    \pgfmathsetlengthmacro{\tipendy}{-0.5*\sbw}
%    \end{macrocode}
% 		These commands are used to set the outer dimensions that \Tikz/\pgf needs.
%    \begin{macrocode}
    \pgfarrowssettipend{\tipendx}
    \pgfarrowssetbackend{\backx}
    \pgfarrowshullpoint{\hullpointx}{\hullpointy}
    \pgfarrowshullpoint{\tipendx}{\tipendy}
  },
  drawing code = {
%    \end{macrocode}
% 		The actual drawing of the arrow.
%    \begin{macrocode}
    \pgfpathmoveto{\pgfpointorigin}
    \pgfpathlineto{\pgfpoint{\tipx}{\tipy}}
    \pgfpathlineto{\pgfpoint{\backx}{\backy}}
    \pgfusepathqstroke
  },
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{Multi Bond Barb}
%	Repeat all for the multi bond barb. The definition of this arrow is elaborated in \cref{sec:multibondarrowtip}.
%    \begin{macrocode}
\pgfdeclarearrow{
  name = {Multi Bond Barb},
  setup code = {
%    \end{macrocode}
% 		Note that the single bond line width is now read from its \pgf key and not from |\pgflinewidth|. The latter now holds the multi bond line width.
%    \begin{macrocode}
    \pgfmathsetlengthmacro{\sbw}{\xbg@singlebondwidth}
    \pgfmathsetlengthmacro{\mbw}{\pgflinewidth}
    \pgfmathsetlengthmacro{\ba}{\xbg@barbangle}
%    \end{macrocode}
% 		The starting point of the drawing of the actual arrow tip is now were the `bottom' line ends. The tip end location is calculated such that the centerline of the barb passes through the endpoint of the `top' double line. This is also described in \cref{sec:multibondarrowtip}.
%    \begin{macrocode}
    \pgfmathsetlengthmacro{\startx}{0pt}
    \pgfmathsetlengthmacro{\starty}{-0.5*\mbw+0.5*\sbw}
    \pgfmathsetlengthmacro{\tipx}{(\mbw-\sbw)/tan(\ba)}
    \pgfmathsetlengthmacro{\tipy}{-0.5*\mbw + 0.5*\sbw}
    \pgfmathsetlengthmacro{\backy}{1.5*\mbw - 0.5*\sbw*cos(\ba)}
    \pgfmathsetlengthmacro{\backx}{-(\backy+\tipy)/tan(\ba)}
%    \end{macrocode}
% 		The outer dimensions of the arrow are slightly different than for the |Single Bond Barb|, but not much.
%    \begin{macrocode}
    \pgfmathsetlengthmacro{\hullpointx}{\backx + 0.5*\sbw*sin(\ba)}
    \pgfmathsetlengthmacro{\hullpointy}{1.5*\mbw}
    \pgfmathsetlengthmacro{\tipendx}{0.5*\sbw/tan(\ba/2) + \tipx}
    \pgfmathsetlengthmacro{\tipendy}{-0.5*\mbw}
%    \end{macrocode}
% 		Again set the \pgf dimensions needed for the definition of the arrow tip.
%    \begin{macrocode}
    \pgfarrowssettipend{\tipendx}
    \pgfarrowssetbackend{\backx}
    \pgfarrowshullpoint{\hullpointx}{\hullpointy}
    \pgfarrowshullpoint{\tipendx}{\tipendy}
  },
  drawing code = {
%    \end{macrocode}
% 		The drawing is the same as for the |Single Bond Barb|, except for the setting the line width to the width of a single bond.
%    \begin{macrocode}
    \pgfpathmoveto{\pgfpoint{\startx}{\starty}}
    \pgfpathlineto{\pgfpoint{\tipx}{\tipy}}
    \pgfpathlineto{\pgfpoint{\backx}{\backy}}
    \pgfsetlinewidth{\sbw}
    \pgfusepathqstroke
  }
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{bond decoration}
% 		The |bond| decoration is used to determine the direction of the barb. It starts with an |initial| state, which only draws a line from the current point to the next segment end. The width expected by \pgf for this decoration is an arbitrary length longer than the segment length, such that only one state per segment is used.
%    \begin{macrocode}
\pgfdeclaredecoration{bond}{initial}{
  \state{initial}[width=\pgfdecoratedinputsegmentlength+1pt]{
    \pgfpathlineto{\pgfpointdecoratedinputsegmentlast}
  }
  \state{final}{
%    \end{macrocode}
% 		With this |\ifcase| the direction of the arrow tip is determined, and stored in a \pgf key. This code is partly taken from the \bondgraphs package, so credits go to Geert Folkertsma, and Mark Wibrow for his answer at \href{https://tex.stackexchange.com/a/208393/74459}{tex.stackexchange.com}. 
% 
% The value of the macro |\xbg@bond@barbflipang| is set to either -1, or 90, with the |barbdirection| option, treated in \cref{opt:barbdirection}.
%    \begin{macrocode}
    \pgfmathparse{int((\pgfdecoratedangle+\xbg@bond@barbflipang)/90)}
    \ifcase\pgfmathresult
      \pgfkeys{/xbondgraphs/bond/barb direction=right}
    \or
      \pgfkeys{/xbondgraphs/bond/barb direction=left}
    \or
      \pgfkeys{/xbondgraphs/bond/barb direction=left}
    \else
      \pgfkeys{/xbondgraphs/bond/barb direction=right}
    \fi
%    \end{macrocode}
%     If the causality of the bond is determined, it is either effort out or flow out. The corresponding arrow definition is set here. If no causality is determined, the arrow definition is either the |Single Bond Barb| or the |Multi Bond Barb|, depending if the |multi| key of the bond has been set to true. The direction is read from the bond's |barb direction| key.
%
%     The causal stroke is drawn as a arrow tip, using the |causal stroke| style, which is defined in the \Tikz family.
%    \begin{macrocode}
    \ifxbg@bond@causality@eout
      \tikzset{-{\xbg@bond@barbtip[\xbg@bond@barbdir]%
        .|[/tikz/causal stroke]}}
    \else
      \ifxbg@bond@causality@fout
        \tikzset{{|[/tikz/causal stroke]}-{\xbg@bond@barbtip%
          [\xbg@bond@barbdir]}}
      \else
        \tikzset{-{\xbg@bond@barbtip[\xbg@bond@barbdir]}}
      \fi
    \fi
%    \end{macrocode}
%    After determining if and where the causality stroke should be drawn, and determining the direction of the barb, a path is drawn using the |template| style of the |bond| family.
%    \begin{macrocode}
    \path[/xbondgraphs/bond/template]\pgfextra{\pgfpathlineto{%
        \pgfpointdecoratedinputsegmentlast}};
  }
}
%    \end{macrocode}
% \end{macro}
%		Some colors are defined that are used for the |error| and |diff| options.\todo{Should change these from colors to \pgf keys to be more consistent.}
%    \begin{macrocode}
\colorlet{diff}{orange}
\colorlet{error}{red}
%    \end{macrocode}
%		And finally, the package options are processed using the |pgfopts| package.
%    \begin{macrocode}
\ProcessPgfPackageOptions{/XBG}
%</package>
%    \end{macrocode}
% \Finale
\endinput