\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{xbondgraphs}[2018/04/27 v0.01 Bond graph drawing using TikZ]

\RequirePackage{pgfopts}
\RequirePackage{tikz}
\RequirePackage{amsfonts}

\usetikzlibrary{arrows.meta,decorations.markings,shapes}

% SINGLE BOND ARROW TIP
\pgfdeclarearrow{
	name = {Single Bond Barb},
	setup code = {
		% Line widths and barb angle used in the path calculations
			\pgfmathsetlengthmacro{\singlebondwidth}{\pgflinewidth}
			\pgfmathsetlengthmacro{\multibondwidth}{\xbondgraphs@multibondwidth}
			\pgfmathsetlengthmacro{\barbangle}{\xbondgraphs@barbangle}
		% Calculate actual path points
			\pgfmathsetlengthmacro{\tipx}{\singlebondwidth}
			\pgfmathsetlengthmacro{\tipy}{0pt}
			\pgfmathsetlengthmacro{\backx}{-1/tan(\barbangle)*(\multibondwidth-0.5*cos(\barbangle)*\singlebondwidth) + \singlebondwidth}
			\pgfmathsetlengthmacro{\backy}{\multibondwidth - 0.5*cos(\barbangle)*\singlebondwidth}
		% Calculate points of outer dimensions as needed by pgf
			\pgfmathsetlengthmacro{\hullpointx}{\backx + 0.5*\singlebondwidth*sin(\barbangle)}
			\pgfmathsetlengthmacro{\hullpointy}{\multibondwidth}
			\pgfmathsetlengthmacro{\tipendx}{0.5*\singlebondwidth/tan(\barbangle/2) + \tipx}
			\pgfmathsetlengthmacro{\tipendy}{-0.5*\singlebondwidth}
		% Set dimensions needed by pgf for outer dimensions of the arrow tip
			\pgfarrowssettipend{\tipendx}
			\pgfarrowssetbackend{\backx}
			\pgfarrowshullpoint{\hullpointx}{\hullpointy}
			\pgfarrowshullpoint{\tipendx}{\tipendy}
	},
	drawing code = {
		\pgfpathmoveto{\pgfpointorigin}
		\pgfpathlineto{\pgfpoint{\tipx}{\tipy}}
		\pgfpathlineto{\pgfpoint{\backx}{\backy}}
		\pgfusepathqstroke%
	},
}
% MULTI BOND ARROW TIP
\pgfdeclarearrow{
	name = {Multi Bond Barb},
	setup code = {
		% Line widths and barb angle used in the path calculations
			\pgfmathsetlengthmacro{\singlebondwidth}{\xbondgraphs@singlebondwidth}
			\pgfmathsetlengthmacro{\multibondwidth}{\pgflinewidth}
			\pgfmathsetlengthmacro{\barbangle}{\xbondgraphs@barbangle}
		% Calculate actual path points
			\pgfmathsetlengthmacro{\startx}{0pt}
			\pgfmathsetlengthmacro{\starty}{-0.5*\multibondwidth+0.5*\singlebondwidth}
			\pgfmathsetlengthmacro{\tipx}{(\multibondwidth-\singlebondwidth)/tan(\barbangle)}
			\pgfmathsetlengthmacro{\tipy}{-0.5*\multibondwidth + 0.5*\singlebondwidth}
			\pgfmathsetlengthmacro{\backy}{1.5*\multibondwidth - 0.5*\singlebondwidth*cos(\barbangle)}
			\pgfmathsetlengthmacro{\backx}{-(\backy+\tipy)/tan(\barbangle)}
		% Calculate points of outer dimensions as needed by pgf
			\pgfmathsetlengthmacro{\hullpointx}{\backx + 0.5*\singlebondwidth*sin(\barbangle)}
			\pgfmathsetlengthmacro{\hullpointy}{1.5*\multibondwidth}
			\pgfmathsetlengthmacro{\tipendx}{0.5*\singlebondwidth/tan(\barbangle/2) + \tipx}
			\pgfmathsetlengthmacro{\tipendy}{-0.5*\multibondwidth}
		% Set dimensions needed by pgf for outer dimensions of the arrow tip
			\pgfarrowssettipend{\tipendx}
			\pgfarrowssetbackend{\backx}
			\pgfarrowshullpoint{\hullpointx}{\hullpointy}
			\pgfarrowshullpoint{\tipendx}{\tipendy}
	},
	drawing code = {
		\pgfpathmoveto{\pgfpoint{\startx}{\starty}}
		\pgfpathlineto{\pgfpoint{\tipx}{\tipy}}
		\pgfpathlineto{\pgfpoint{\backx}{\backy}}
		\pgfsetlinewidth{\singlebondwidth}%
		\pgfusepathqstroke%
	}
}

% BOND DECORATION
\pgfdeclaredecoration{bond}{initial}{
	\state{initial}[width=\pgfdecoratedinputsegmentlength+1pt]{
		\pgfpathlineto{\pgfpointdecoratedinputsegmentlast}
	}
	\state{final}{
		% 
		\pgfmathparse{int((\pgfdecoratedangle+\xbondgraphs@bond@barbdirectionflipangle)/90)}
		\ifcase\pgfmathresult
			\pgfkeys{/xbondgraphs/bond/barb direction=right}
		\or
			\pgfkeys{/xbondgraphs/bond/barb direction=left}
		\or
			\pgfkeys{/xbondgraphs/bond/barb direction=left}
		\else
			\pgfkeys{/xbondgraphs/bond/barb direction=right}
		\fi
		\ifxbondgraphs@bond@causality@eout
			\tikzset{-{\xbondgraphs@bond@barbarrowhead[\xbondgraphs@bond@barbdirection].|[/tikz/causal stroke style]}}
		\else
			\ifxbondgraphs@bond@causality@fout
				\tikzset{{|[/tikz/causal stroke style]}-{\xbondgraphs@bond@barbarrowhead[\xbondgraphs@bond@barbdirection]}}
			\else
				\tikzset{-{\xbondgraphs@bond@barbarrowhead[\xbondgraphs@bond@barbdirection]}}
			\fi
		\fi
		\path[/xbondgraphs/bond/template]\pgfextra{\pgfpathlineto{\pgfpointdecoratedinputsegmentlast}};
	}
}

% ifs for the bond options
\newif\ifxbondgraphs@bond@causality@eout
\newif\ifxbondgraphs@bond@causality@fout

% ifs for the element options
\newif\ifxbondgraphs@element@word
\newif\ifxbondgraphs@element@multiport

% Define 'xbondgraphs' as key family for this package
\pgfkeys{
	xbondgraphs/.is family,
	xbondgraphs,
		% Two key families are mainly used, first is 'bond':
		bond/.is family,
		bond,
			template/.style={
				shorten < = 3pt,
				shorten > = 3pt,
				draw,
				line width = \xbondgraphs@singlebondwidth,
			},
			barb direction/.store in=\xbondgraphs@bond@barbdirection,
			barb direction flip angle/.store in=\xbondgraphs@bond@barbdirectionflipangle,
			eout/.is if=xbondgraphs@bond@causality@eout,
			eout=false,
			fout/.is if=xbondgraphs@bond@causality@fout,
			fout=false,
			effort out/.code=\pgfkeys{
				/xbondgraphs/bond/.cd,
					eout=true,
					fout=false,
				/tikz/causal stroke style/.append style={#1}
			},
			flow out/.code=\pgfkeys{
				/xbondgraphs/bond/.cd,
					eout=false,
					fout=true,
				/tikz/causal stroke style/.append style={#1}
			},
			effort in/.code=\pgfkeys{/xbondgraphs/bond/flow out={#1}},
			flow in/.code=\pgfkeys{/xbondgraphs/bond/effort out={#1}},
			multi/.code=\pgfkeys{
				/xbondgraphs/bond/causality stroke scale=3,
				/xbondgraphs/bond/barb arrow head={Multi Bond Barb},
				/xbondgraphs/bond/template/.append style={
					double,double distance={\xbondgraphs@multibondwidth-2*\xbondgraphs@singlebondwidth}
				},
				/tikz/line width = \xbondgraphs@multibondwidth,
			},
			causality stroke scale/.store in=\xbondgraphs@causalitystrokescale,
			causality stroke scale=2,
			barb arrow head/.store in=\xbondgraphs@bond@barbarrowhead,
			barb arrow head={Single Bond Barb},
			label/.style = {
				\xbondgraphs@bondlabelcolor,
			},
	/xbondgraphs,
		% Second key family is 'element':
		element/.is family,
		element,
			n/.store in=\xbondgraphs@element@n,
			n=1,
			word/.is if=xbondgraphs@element@word,
			word=false,
			multiport boolean/.is if=xbondgraphs@element@multiport,
			multiport boolean=false,
			multiport/.code=\pgfkeys{
				/xbondgraphs/element/multiport boolean=true,
			},
			label/.style={
				\xbondgraphs@bgelementlabelcolor,
			},
	% The 'XBG' keys are used as package options
	/XBG/.cd,
		barbangle/.store in=\xbondgraphs@barbangle,
		barbangle=40,
		singlebondwidth/.store in=\xbondgraphs@singlebondwidth,
		singlebondwidth=1pt,
		multibondwidth/.store in=\xbondgraphs@multibondwidth,
		multibondwidth=4pt,
		bgelementlabelcolor/.store in=\xbondgraphs@bgelementlabelcolor,
		bgelementlabelcolor=blue,
		bondlabelcolor/.store in=\xbondgraphs@bondlabelcolor,
		bondlabelcolor=green!50!black,
		gray/.code={
			\pgfkeys{
				/XBG/.cd, bondlabelcolor=gray, bgelementlabelcolor=gray
			}
			\colorlet{diff}{white!60!black}
			\colorlet{error}{white!30!black}
		},
		barbdirection/.is choice,
		barbdirection/leftbelow/.code={\pgfkeys{/xbondgraphs/bond/barb direction flip angle=45}},
		barbdirection/alwaysbelow/.code={\pgfkeys{/xbondgraphs/bond/barb direction flip angle=-1}},
		barbdirection/alwaysbelow,
	/tikz/.cd,
		bond/.style={
			/xbondgraphs/bond,
			#1,
			/tikz,
			draw = none,
			decoration={bond},
			postaction=decorate,
		},
		bond graph element/.code 2 args={
			\pgfkeys{
				/xbondgraphs/element,
				#2
			}
			\tikzset{
				shape=rounded rectangle,
				inner sep = 1.5pt,
				node contents = {%
					\ifxbondgraphs@element@multiport%
						\ifnum\xbondgraphs@element@n=1
							\ensuremath{\mathbb{#1}}%
						\else
							\ensuremath{\mathbb{#1}_{\xbondgraphs@element@n}}
						\fi
					\else%
						\ifnum\xbondgraphs@element@n=1
							\ensuremath{\mathbf{#1}}%
						\else
							\ensuremath{\mathbf{#1}_{\xbondgraphs@element@n}}%
						\fi
					\fi%
				},
				prefix after command={
					\pgfextra{
						\tikzset{
							every pin/.style={
								/xbondgraphs/element/label,
								pin distance = 2pt,
								pin edge={
									draw = none,
									decoration={
										markings,
										mark = at position 0.5 with {
											\node[rotate=\pgfdecoratedangle,inner sep = 0pt,/xbondgraphs/element/label]{:};
										},
									},
									decorate,
								},
							},
							every label/.style={
								/xbondgraphs/element/label,
							},
						},
					}
				},
			}
			\ifxbondgraphs@element@word
				\tikzset{draw,line width = 0.75\xbondgraphs@singlebondwidth,shape=ellipse}
			\fi
		},
		bond label/.style={
			font=\small,
			/xbondgraphs/bond/label,
			sloped,
		},
		effort/.style={
			edge node={node [bond label,above]{#1}}
		},
		flow/.style={
			edge node={node [bond label,below]{#1}}
		},
		causal stroke style/.style={
			width=\xbondgraphs@causalitystrokescale*\xbondgraphs@multibondwidth,
		},
}

% MUX SHAPE
\pgfkeys{
	/tikz/mux/.code={
		\pgfkeys{
			%			/tikz/shape=mux,
			/mux/.cd,
			#1
		}
		\tikzset{
			outer sep = 0pt,
			inner sep = 0pt,
			minimum width = \pgfkeysvalueof{/mux/width},
			node contents = {},
			fill=black,
			shape=mux,
		}
	},
	/mux/.is family,
	mux,
		inputs/.initial=2,
		outputs/.initial=2,
		io spacing/.initial=5mm,
		width/.initial=3pt,
}
\pgfdeclareshape{mux}{
	\savedanchor\centerpoint{%
		\pgf@x=0%
		\pgf@y=0%
	}%
	\inheritsavedanchors[from=rectangle] 
	\inheritanchorborder[from=rectangle]
	\inheritanchor[from=rectangle]{north}
	\inheritanchor[from=rectangle]{north west}
	\inheritanchor[from=rectangle]{north east}
	\inheritanchor[from=rectangle]{center}
	\inheritanchor[from=rectangle]{west}
	\inheritanchor[from=rectangle]{east}
	\inheritanchor[from=rectangle]{mid}
	\inheritanchor[from=rectangle]{mid west}
	\inheritanchor[from=rectangle]{mid east}
	\inheritanchor[from=rectangle]{south}
	\inheritanchor[from=rectangle]{south west}
	\inheritanchor[from=rectangle]{south east}
	\savedmacro\inputs{\pgfmathtruncatemacro\inputs{\pgfkeysvalueof{/mux/inputs}}}%
	\savedmacro\outputs{\pgfmathtruncatemacro\outputs{\pgfkeysvalueof{/mux/outputs}}}%
	\savedmacro\numio{\pgfmathparse{max(\inputs,\outputs)}\pgfmathtruncatemacro\numio\pgfmathresult}
	\saveddimen\height{%
		\pgfmathparse{max(\pgfkeysvalueof{/mux/inputs},\pgfkeysvalueof{/mux/outputs})}
		\pgfmathparse{(\pgfmathresult) * \pgfkeysvalueof{/mux/io spacing}}
		\pgfmathsetlength\pgf@x{\pgfmathresult}
	}
	\saveddimen\halfwidth{\pgfmathsetlength\pgf@x{\pgfkeysvalueof{/mux/width}/2}\pgfmathresult}
	\saveddimen\iospacing{\pgfmathsetlength\pgf@x{\pgfkeysvalueof{/mux/io spacing}}\pgfmathresult}
	\backgroundpath{
		\pgfpathrectanglecorners{
			\pgfpointadd{\centerpoint}{\pgfpoint{-\halfwidth}{\height/2}}
		}{
			\pgfpointadd{\centerpoint}{\pgfpoint{\halfwidth}{-\height/2}}
		}
	}
	\pgfutil@g@addto@macro\pgf@sh@s@mux{%
		% Start with the maximum input number and go backwards.
		% If the anchor is undefined, create it. Otherwise stop.
		\c@pgf@counta=\pgfkeysvalueof{/mux/inputs}\relax%
		\pgfmathloop%
		\ifnum\c@pgf@counta>0\relax%
		\pgfutil@ifundefined{pgf@anchor@mux@input\the\c@pgf@counta}{%
			\expandafter\xdef\csname pgf@anchor@mux@input\the\c@pgf@counta\endcsname{%
				\noexpand\ioanchor{\the\c@pgf@counta}{-1}{((\inputs-\numio)/2+0.5)}%
			}%
		}{\c@pgf@counta=0\relax}%
		\advance\c@pgf@counta-1\relax%
		\repeatpgfmathloop%  
	}%
	\pgfutil@g@addto@macro\pgf@sh@s@mux{%
		% Start with the maximum output number and go backwards.
		% If the anchor is undefined, create it. Otherwise stop.
		\c@pgf@counta=\pgfkeysvalueof{/mux/outputs}\relax%
		\pgfmathloop%
		\ifnum\c@pgf@counta>0\relax%
		\pgfutil@ifundefined{pgf@anchor@mux@output\the\c@pgf@counta}{%
			\expandafter\xdef\csname pgf@anchor@mux@output\the\c@pgf@counta\endcsname{%
				\noexpand\ioanchor{\the\c@pgf@counta}{1}{((\outputs-\numio)/2+0.5)}%
			}%
		}{\c@pgf@counta=0\relax}%
		\advance\c@pgf@counta-1\relax%
		\repeatpgfmathloop%  
	}%
}

\def\ioanchor#1#2#3{%
	\pgfpointadd{\centerpoint}{\pgfpoint{#2*\halfwidth}{\height/2-#1*\iospacing+#3*\iospacing}}%
}

\colorlet{diff}{orange}
\colorlet{error}{red}

% Proces all /XBG keys as package options
\ProcessPgfPackageOptions{/XBG}

\endinput